package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"log"
	"math"

	"github.com/Courtcircuits/HackTheCrous.api/api"
	"github.com/Courtcircuits/HackTheCrous.api/graph/model"
	"github.com/Courtcircuits/HackTheCrous.api/util"
)

// CreateSchool is the resolver for the createSchool field.
func (r *mutationResolver) CreateSchool(ctx context.Context, name *string, coords *string) (*model.School, error) {
	panic(fmt.Errorf("not implemented: CreateSchool - createSchool"))
}

// ModifyUser is the resolver for the modifyUser field.
func (r *mutationResolver) ModifyUser(ctx context.Context, name *string, ical *string, school *int, restaurants []*int) (*model.User, error) {
	panic(fmt.Errorf("not implemented: ModifyUser - modifyUser"))
}

// ModifyUserBySchoolName is the resolver for the modifyUserBySchoolName field.
func (r *mutationResolver) ModifyUserBySchoolName(ctx context.Context, name *string, ical *string, school *string, restaurants []*int) (*model.User, error) {
	panic(fmt.Errorf("not implemented: ModifyUserBySchoolName - modifyUserBySchoolName"))
}

// Like is the resolver for the like field.
func (r *mutationResolver) Like(ctx context.Context, idrestaurant *int) ([]*model.Restaurant, error) {
	panic(fmt.Errorf("not implemented: Like - like"))
}

// Dislike is the resolver for the dislike field.
func (r *mutationResolver) Dislike(ctx context.Context, idrestaurant *int) ([]*model.Restaurant, error) {
	panic(fmt.Errorf("not implemented: Dislike - dislike"))
}

// ModifyUserField is the resolver for the modifyUserField field.
func (r *mutationResolver) ModifyUserField(ctx context.Context, name *string, ical *string, school *string, mail *string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: ModifyUserField - modifyUserField"))
}

// Restaurant is the resolver for the restaurant field.
func (r *queryResolver) Restaurant(ctx context.Context, url *string) (*model.Restaurant, error) {
	panic(fmt.Errorf("not implemented: Restaurant - restaurant"))
}

// Restaurants is the resolver for the restaurants field.
func (r *queryResolver) Restaurants(ctx context.Context) ([]*model.Restaurant, error) {
	var restaurants []*model.Restaurant
	db_restaurants, err := api.GetServer().Store.GetRestaurants()
	if err != nil {
		log.Fatalf("error while getting restaurants in the resolver : %q\n", err)
		return []*model.Restaurant{}, errors.New("500, error while getting restaurants")
	}

	for _, restaurant := range db_restaurants {
		restaurants = append(restaurants, restaurant.ToGraphQL())
		log.Println(restaurant)
	}

	return restaurants, nil
}

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, query *string) ([]*model.Restaurant, error) {
	panic(fmt.Errorf("not implemented: Search - search"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, iduser *int) (*model.User, error) {
	if iduser == nil {
		gc, err := api.GetGinContext(ctx)
		if err != nil {
			return nil, err
		}
		id := gc.GetInt("id")
		iduser = &id
	}
	user, err := api.GetServer().Store.GetUserByID(*iduser)
	return user.ToGraphQL(), err
}

// SearchRestaurant is the resolver for the searchRestaurant field.
func (r *queryResolver) SearchRestaurant(ctx context.Context, query *string) ([]*model.Restaurant, error) {
	panic(fmt.Errorf("not implemented: SearchRestaurant - searchRestaurant"))
}

// SearchSchool is the resolver for the searchSchool field.
func (r *queryResolver) SearchSchool(ctx context.Context, query *string) ([]*model.School, error) {
	panic(fmt.Errorf("not implemented: SearchSchool - searchSchool"))
}

// SearchFood is the resolver for the searchFood field.
func (r *queryResolver) SearchFood(ctx context.Context, query *string) ([]*model.Restaurant, error) {
	panic(fmt.Errorf("not implemented: SearchFood - searchFood"))
}

// Day is the resolver for the day field.
func (r *queryResolver) Day(ctx context.Context, date *string) ([]*model.PlanningDay, error) {
	panic(fmt.Errorf("not implemented: Day - day"))
}

// Today is the resolver for the today field.
func (r *queryResolver) Today(ctx context.Context) ([]*model.PlanningDay, error) {
	panic(fmt.Errorf("not implemented: Today - today"))
}

// Period is the resolver for the period field.
func (r *queryResolver) Period(ctx context.Context, start *string, end *string) ([]*model.PlanningDay, error) {
	panic(fmt.Errorf("not implemented: Period - period"))
}

// GetLatestMail is the resolver for the getLatestMail field.
func (r *queryResolver) GetLatestMail(ctx context.Context) (*model.Mail, error) {
	panic(fmt.Errorf("not implemented: GetLatestMail - getLatestMail"))
}

// GetLatestMails is the resolver for the getLatestMails field.
func (r *queryResolver) GetLatestMails(ctx context.Context, rangeArg *int) ([]*model.Mail, error) {
	panic(fmt.Errorf("not implemented: GetLatestMails - getLatestMails"))
}

// Meals is the resolver for the meals field.
func (r *restaurantResolver) Meals(ctx context.Context, obj *model.Restaurant) ([]*model.Meal, error) {
	panic(fmt.Errorf("not implemented: Meals - meals"))
}

// Distance is the resolver for the distance field.
func (r *restaurantResolver) Distance(ctx context.Context, obj *model.Restaurant) (*float64, error) {
	gc, err := api.GetGinContext(ctx)

	err_val_inf := math.Inf(1)
	if err != nil {
		return nil, err
	}
	school, err := api.GetServer().Store.GetSchoolOfUser(gc.GetInt("id"))

	if err != nil {
		if err == sql.ErrNoRows {
			return &err_val_inf, errors.New("user school not found")
		} else {
			return &err_val_inf, err
		}
	}

	distance := util.ComputeDistance(school.Coords, util.Coordinates{
		X: *obj.Coords.X,
		Y: *obj.Coords.Y,
	})

	return &distance, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Restaurant returns RestaurantResolver implementation.
func (r *Resolver) Restaurant() RestaurantResolver { return &restaurantResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type restaurantResolver struct{ *Resolver }
